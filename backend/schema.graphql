# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cvs(
    where: CvWhereInput! = {}
    orderBy: [CvOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cv!]
  cvsCount(where: CvWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  cvs: CvManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CvManyRelationFilter {
  every: CvWhereInput
  some: CvWhereInput
  none: CvWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cvs: CvRelateToManyForUpdateInput
}

input CvRelateToManyForUpdateInput {
  disconnect: [CvWhereUniqueInput!]
  set: [CvWhereUniqueInput!]
  create: [CvCreateInput!]
  connect: [CvWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cvs: CvRelateToManyForCreateInput
}

input CvRelateToManyForCreateInput {
  create: [CvCreateInput!]
  connect: [CvWhereUniqueInput!]
}

type Cv {
  id: ID!
  title: String
  introduction: String
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  author: User
}

input CvWhereUniqueInput {
  id: ID
}

input CvWhereInput {
  AND: [CvWhereInput!]
  OR: [CvWhereInput!]
  NOT: [CvWhereInput!]
  id: IDFilter
  title: StringFilter
  introduction: StringFilter
  experiences: ExperienceManyRelationFilter
  author: UserWhereInput
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input CvOrderByInput {
  id: OrderDirection
  title: OrderDirection
  introduction: OrderDirection
}

input CvUpdateInput {
  title: String
  introduction: String
  experiences: ExperienceRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CvUpdateArgs {
  where: CvWhereUniqueInput!
  data: CvUpdateInput!
}

input CvCreateInput {
  title: String
  introduction: String
  experiences: ExperienceRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Experience {
  id: ID!
  from: DateTime
  to: DateTime
  description: Experience_description_Document
  cv: Cv
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Experience_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  cv: CvWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ExperienceOrderByInput {
  id: OrderDirection
  from: OrderDirection
  to: OrderDirection
}

input ExperienceUpdateInput {
  from: DateTime
  to: DateTime
  description: JSON
  cv: CvRelateToOneForUpdateInput
}

input CvRelateToOneForUpdateInput {
  create: CvCreateInput
  connect: CvWhereUniqueInput
  disconnect: Boolean
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  from: DateTime
  to: DateTime
  description: JSON
  cv: CvRelateToOneForCreateInput
}

input CvRelateToOneForCreateInput {
  create: CvCreateInput
  connect: CvWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCv(data: CvCreateInput!): Cv
  createCvs(data: [CvCreateInput!]!): [Cv]
  updateCv(where: CvWhereUniqueInput!, data: CvUpdateInput!): Cv
  updateCvs(data: [CvUpdateArgs!]!): [Cv]
  deleteCv(where: CvWhereUniqueInput!): Cv
  deleteCvs(where: [CvWhereUniqueInput!]!): [Cv]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  cvs(
    where: CvWhereInput! = {}
    orderBy: [CvOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cv!]
  cv(where: CvWhereUniqueInput!): Cv
  cvsCount(where: CvWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
